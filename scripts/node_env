#!/bin/bash

# [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"

# its not the echo's

# Notes
# Works well if all things are specified in engines
# Breaks if engines.node is an old version and npm is not specified (tries to install latest npm)

# resolve_engines_version()
#
# Looks for local package.json for an engines field
# Resolves version (could be semver pattern) via semver.io endpoint
# Defaults to stable version of given dep
# Does not handle errors if arg is not node|npm|yarn
#
# @param {string} $1 - tool [node|npm|yarn]
# @returns {string} - resolved version
node_env__resolve_engines_version () {
  if [ $# -eq 1 ]; then
    local version=$(cat package.json | jq .engines.$1 | sed -e 's/^"//' -e 's/"$//')
    if [ -z "$version" ]; then
      curl -s "https://semver.io/$1/stable"
    else
      curl -s "https://semver.io/$1/resolve/${version/ /%20}"
    fi
  fi
}

# node_env__detect_engines()
#
# Output expected versus actual version of node CLIs
node_env__detect_engines () {
  if [ -f package.json ]; then
    local node_v=$(node -v | sed -e s/^v//)
    local target_node_v=$(node_env__resolve_engines_version "node")
    if [ $node_v != $target_node_v ]; then
      echo "node - current: $node_v, expected: $target_node_v"
      nvm i $target_node_v && nvm use $target_node_v
      echo "node v$node_v"
    fi
    if [ -f yarn.lock ]; then
      # if yarn.lock found
      local yarn_v=$(yarn -v)
      local target_yarn_v=$(node_env__resolve_engines_version "yarn")
      if [ $yarn_v != $target_yarn_v ]; then
        echo "yarn - current: $yarn_v, expected: $target_yarn_v"
        curl -o- -L https://yarnpkg.com/install.sh | bash -s -- --version $target_yarn_v
        echo "yarn v$(yarn -v) -- Install deps via 'yarn install'"
      fi
    else
      # whether there is a package-lock.json or not (default to use npm)
      local npm_v=$(npm -v)
      local target_npm_v=$(node_env__resolve_engines_version "npm")
      if [ $npm_v != $target_npm_v ]; then
        echo "npm - current: $npm_v, expected: $target_npm_v"
        npm i -g npm@$target_npm_v
        echo "npm v$(npm -v) -- Install deps via 'npm install'"
      fi
    fi
  fi
}

# setup_node()
#
# Installs correct versions for node and either npm or yarn based on engines fields
node_env () {
  if [ ! -f package.json ]; then
    echo "No package.json found"
  else
    node_env__detect_engines
  fi

  # doesn't work because process is spawned separately
  # rm -rf '~/node_modules'
  # rm '~/yarn.lock'
  # rm '~/package-lock.json'
}
